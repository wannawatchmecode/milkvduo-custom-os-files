from http.server import HTTPServer, BaseHTTPRequestHandlerdef run(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler):    server_address = ('', 8000)    httpd = server_class(server_address, handler_class)    httpd.serve_forever()#run()# Now let's run it on the duo!# It works!# Now what should we do with it?# ........# Will think about it for a bit then come back... peace out!# So now that we know the python server works on the riscv milkvduos# let's write a server for uploading (or managing) files on the milkvduos# Some considerations are# A. Our systems only have 256mb of memory# A1. We will need to chunk larger files during transmission to ensure we don't# Go over this limit.# B. Throttling, we don't want to overload the milkv's to the point where# they crash, so we will need to implement throttling mechanisms to control# the rate that we send requests. This should be tunable.# Let's write some code...class MicroServer(BaseHTTPRequestHandler):    def do_GET(self):        #self.wfile.write("POST to /upload for uploading")        self.send_response(200, message="POST to /upload for uploading")    def do_POST(self):        if self.path == '/upload':            self.upload()    def upload(self):        contentlength = int(self.headers.get('content-length', 0));        filename = self.headers.get('x-file-name'); #This is the filename to write to        if filename is None:            print("filename must be defined")            self.send_response(400);            return        line = str(self.rfile.read(contentlength), encoding='utf-8');#        while line != None:        print(line)        f = open(filename, "w");        f.write(line);        f.close()#            line = self.rfile.read()        self.send_response(200)print("Starting server on port 8000")run(HTTPServer, MicroServer)print("Server shutdown")